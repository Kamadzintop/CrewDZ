"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
–ö—Ä–∞—Å–∏–≤—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π AI
"""

from flask import Flask, render_template, request, jsonify, session
import os
import json
from datetime import datetime
import threading
import time
from typing import Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞
try:
    from fin_crew import analyze_investment_opportunity, cache_manager
    SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞: {e}")
    SYSTEM_AVAILABLE = False

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'your-secret-key-here')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
active_tasks = {}

class AnalysisTask:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self, company_name: str):
        self.id = f"task_{int(time.time())}"
        self.company_name = company_name
        self.status = "initializing"
        self.progress = 0
        self.result = None
        self.error = None
        self.start_time = datetime.now()
        self.end_time = None
        self.current_action = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."  # –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        self.action_history = []  # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        self.agents_status = {
            "case_analyst": "waiting",
            "financial_analyst": "waiting", 
            "company_analyst": "waiting",
            "decision_maker_analyst": "waiting",
            "news_analyst": "waiting",
            "risk_advisor": "waiting",
            "final_validator": "waiting"
        }
    
    def update_progress(self, progress: int, agent: Optional[str] = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.progress = progress
        if agent:
            self.agents_status[agent] = "completed"
    
    def update_action(self, action: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        self.current_action = f"[{timestamp}] {action}"
        self.action_history.append(self.current_action)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        if len(self.action_history) > 10:
            self.action_history = self.action_history[-10:]
    
    def complete(self, result: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        self.status = "completed"
        self.result = result
        self.end_time = datetime.now()
        self.progress = 100
        self.update_action("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def fail(self, error: Optional[str]):
        """–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.status = "failed"
        self.error = str(error) if error is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        self.end_time = datetime.now()
        self.update_action(f"‚ùå –û—à–∏–±–∫–∞: {self.error}")

def run_analysis_task(task: AnalysisTask):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
    try:
        task.status = "running"
        task.progress = 10
        task.update_action("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        MAX_ANALYSIS_TIME = 300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        start_time = time.time()
        
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ {task.company_name} —Å —Ç–∞–π–º–∞—É—Ç–æ–º {MAX_ANALYSIS_TIME}—Å")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
        agents = list(task.agents_status.keys())
        for i, agent in enumerate(agents):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if time.time() - start_time > MAX_ANALYSIS_TIME:
                task.fail("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞. –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã.")
                return
                
            agent_name = agent.replace('_', ' ').title()
            task.update_action(f"ü§ñ {agent_name} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ...")
            task.update_progress(10 + (i + 1) * 12, agent)
            time.sleep(1)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏
        
        # –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º.
        if SYSTEM_AVAILABLE:
            task.update_action("üîÑ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞...")
            print(f"ü§ñ –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {task.company_name}")
            result = analyze_investment_opportunity(task.company_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
            result_str = str(result) if result is not None else ""
            if "–°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã" in result_str:
                task.fail(result_str)
            else:
                task.complete(result_str)
        else:
            task.update_action("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            # –î–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            demo_result = f"""
            ============================================================================
            –î–ï–ú–û-–ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ò: {task.company_name}
            ============================================================================
            
            üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –° –î–í–û–ô–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ï–ô AI
            
            ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–µ–π—Å–æ–≤: –ó–∞–≤–µ—Ä—à–µ–Ω
            ‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫: –ó–∞–≤–µ—Ä—à–µ–Ω  
            ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏: –ó–∞–≤–µ—Ä—à–µ–Ω
            ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: –ó–∞–≤–µ—Ä—à–µ–Ω
            ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: –ó–∞–≤–µ—Ä—à–µ–Ω
            ‚úÖ –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ä–∏—Å–∫–∞–º: –ó–∞–≤–µ—Ä—à–µ–Ω
            ‚úÖ –ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä: –ó–∞–≤–µ—Ä—à–µ–Ω
            
            üéØ –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:
            –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤,
            —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è [–î–ï–ú–û-–†–ï–ó–£–õ–¨–¢–ê–¢] –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {task.company_name}.
            
            üìà –£–†–û–í–ï–ù–¨ –£–í–ï–†–ï–ù–ù–û–°–¢–ò: 85%
            ‚è±Ô∏è –í–†–ï–ú–Ø –ê–ù–ê–õ–ò–ó–ê: {datetime.now().strftime('%H:%M:%S')}
            """
            task.complete(demo_result)
            
    except Exception as e:
        error_msg = str(e)
        error_str = error_msg.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
        if "insufficient balance" in error_str or "badrequesterror" in error_str:
            from fin_crew import switch_to_alternative_llm, llm
            alternative_llm = switch_to_alternative_llm(llm, error_msg)
            if alternative_llm and alternative_llm != llm:
                task.update_action(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {alternative_llm.model}, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑...")
                try:
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
                    result = analyze_investment_opportunity(task.company_name)
                    task.complete(result)
                    return
                except Exception as retry_exception:
                    task.fail(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–∂–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {str(retry_exception)}")
                    return
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "timeout" in error_str or "timed out" in error_str:
            task.fail("‚è∞ –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")
        elif "insufficient balance" in error_str:
            task.fail("üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.")
        elif "badrequesterror" in error_str:
            task.fail("üîß –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        else:
            task.fail(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/api/analyze', methods=['POST'])
def start_analysis():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        data = request.get_json()
        company_name = data.get('company_name', '').strip()
        
        if not company_name:
            return jsonify({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = AnalysisTask(company_name)
        active_tasks[task.id] = task
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_analysis_task, args=(task,))
        thread.daemon = True
        thread.start()
        
        return jsonify({
            'task_id': task.id,
            'status': 'started',
            'message': f'–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ "{company_name}" –∑–∞–ø—É—â–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}), 500

@app.route('/api/status/<task_id>')
def get_status(task_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    task = active_tasks.get(task_id)
    if not task:
        return jsonify({'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
    
    return jsonify({
        'task_id': task.id,
        'company_name': task.company_name,
        'status': task.status,
        'progress': task.progress,
        'current_action': task.current_action,
        'action_history': task.action_history[-3:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–µ–π—Å—Ç–≤–∏—è
        'agents_status': task.agents_status,
        'start_time': task.start_time.isoformat(),
        'end_time': task.end_time.isoformat() if task.end_time else None,
        'result': task.result,
        'error': task.error
    })

@app.route('/api/tasks')
def get_tasks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    tasks = []
    for task_id, task in active_tasks.items():
        tasks.append({
            'id': task_id,
            'company_name': task.company_name,
            'status': task.status,
            'progress': task.progress,
            'start_time': task.start_time.isoformat()
        })
    
    return jsonify({'tasks': tasks})

@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    cache_stats = {}
    if SYSTEM_AVAILABLE and cache_manager:
        try:
            cache_dir = cache_manager.cache_dir
            if os.path.exists(cache_dir):
                cache_files = [f for f in os.listdir(cache_dir) if f.endswith('.pkl')]
                cache_stats = {
                    'cache_files_count': len(cache_files),
                    'cache_dir': cache_dir,
                    'cache_size_mb': sum(os.path.getsize(os.path.join(cache_dir, f)) for f in cache_files) / (1024 * 1024)
                }
        except Exception as e:
            cache_stats = {'error': str(e)}
    
    return jsonify({
        'status': 'healthy',
        'system_available': SYSTEM_AVAILABLE,
        'active_tasks': len(active_tasks),
        'cache_stats': cache_stats,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/cache/clear', methods=['POST'])
def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
    try:
        if not SYSTEM_AVAILABLE or not cache_manager:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        cleared_count = cache_manager.clear_old_cache()
        return jsonify({
            'success': True,
            'cleared_count': cleared_count,
            'message': f'–û—á–∏—â–µ–Ω–æ {cleared_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞'
        })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {str(e)}'}), 500

@app.route('/api/cache/stats')
def cache_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞"""
    try:
        if not SYSTEM_AVAILABLE or not cache_manager:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
        
        cache_dir = cache_manager.cache_dir
        if os.path.exists(cache_dir):
            cache_files = [f for f in os.listdir(cache_dir) if f.endswith('.pkl')]
            total_size = sum(os.path.getsize(os.path.join(cache_dir, f)) for f in cache_files)
            
            return jsonify({
                'cache_files_count': len(cache_files),
                'cache_size_bytes': total_size,
                'cache_size_mb': total_size / (1024 * 1024),
                'cache_dir': cache_dir
            })
        else:
            return jsonify({
                'cache_files_count': 0,
                'cache_size_bytes': 0,
                'cache_size_mb': 0,
                'cache_dir': cache_dir
            })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞: {str(e)}'}), 500

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ—Ä—Ç—É 8765
    debug_mode = os.getenv('DEBUG', 'False').lower() == 'true'
    app.run(host='0.0.0.0', port=8765, debug=debug_mode) 