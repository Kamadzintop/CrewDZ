from crewai import Agent, Task, Crew, Process, LLM
from crewai.tools import BaseTool
# –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç langchain.tools
# from langchain.tools import tool
import os
import requests
import json
import time
import asyncio
import logging
from typing import List, Dict, Any, Union, Optional
from datetime import datetime
import pandas as pd
import numpy as np
from functools import wraps

from dotenv import load_dotenv
load_dotenv()

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–î–†–û–ë–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('analysis_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def log_step(step_name: str, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    timestamp = datetime.now().strftime('%H:%M:%S.%f')[:-3]
    message = f"[{timestamp}] üîÑ {step_name}"
    if details:
        message += f" - {details}"
    logger.info(message)
    print(message)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# ============================================================================
<<<<<<< HEAD
# –°–ò–°–¢–ï–ú–ê –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –£–ú–ï–ù–¨–®–ï–ù–ò–Ø –¢–†–ê–§–ò–ö–ê LLM
# ============================================================================

import hashlib
import pickle
import os.path

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ LLM"""
    
    def __init__(self, cache_dir: str = "cache", max_age_hours: int = 24):
        self.cache_dir = cache_dir
        self.max_age_seconds = max_age_hours * 3600
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–µ—à–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)
            log_step("–ö–ï–® –°–û–ó–î–ê–ù", f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞: {cache_dir}")
    
    def _get_cache_key(self, data: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        return hashlib.md5(data.encode('utf-8')).hexdigest()
    
    def _get_cache_path(self, cache_key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–µ—à–∞"""
        return os.path.join(self.cache_dir, f"{cache_key}.pkl")
    
    def get(self, data: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞"""
        try:
            cache_key = self._get_cache_key(data)
            cache_path = self._get_cache_path(cache_key)
            
            if not os.path.exists(cache_path):
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞
            file_age = time.time() - os.path.getmtime(cache_path)
            if file_age > self.max_age_seconds:
                log_step("–ö–ï–® –£–°–¢–ê–†–ï–õ", f"–í–æ–∑—Ä–∞—Å—Ç: {file_age/3600:.1f}—á, –º–∞–∫—Å–∏–º—É–º: {self.max_age_seconds/3600}—á")
                os.remove(cache_path)
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
            with open(cache_path, 'rb') as f:
                cached_data = pickle.load(f)
            
            log_step("–ö–ï–® –ù–ê–ô–î–ï–ù", f"–ö–ª—é—á: {cache_key[:8]}...")
            return cached_data
            
        except Exception as e:
            log_step("–û–®–ò–ë–ö–ê –ö–ï–®–ê", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
            return None
    
    def set(self, data: str, result: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à"""
        try:
            cache_key = self._get_cache_key(data)
            cache_path = self._get_cache_path(cache_key)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
            with open(cache_path, 'wb') as f:
                pickle.dump(result, f)
            
            log_step("–ö–ï–® –°–û–•–†–ê–ù–ï–ù", f"–ö–ª—é—á: {cache_key[:8]}...")
            return True
            
        except Exception as e:
            log_step("–û–®–ò–ë–ö–ê –ö–ï–®–ê", f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def clear_old_cache(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞"""
        try:
            cleared_count = 0
            current_time = time.time()
            
            for filename in os.listdir(self.cache_dir):
                if filename.endswith('.pkl'):
                    file_path = os.path.join(self.cache_dir, filename)
                    file_age = current_time - os.path.getmtime(file_path)
                    
                    if file_age > self.max_age_seconds:
                        os.remove(file_path)
                        cleared_count += 1
            
            if cleared_count > 0:
                log_step("–ö–ï–® –û–ß–ò–©–ï–ù", f"–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleared_count}")
            
            return cleared_count
            
        except Exception as e:
            log_step("–û–®–ò–ë–ö–ê –û–ß–ò–°–¢–ö–ò –ö–ï–®–ê", f"–û—à–∏–±–∫–∞: {e}")
            return 0

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
cache_dir = os.getenv("CACHE_DIR", "cache")
cache_max_age_hours = int(os.getenv("CACHE_MAX_AGE_HOURS", "24"))
cache_manager = CacheManager(cache_dir=cache_dir, max_age_hours=cache_max_age_hours)

# ============================================================================
=======
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# –ù–ê–°–¢–†–û–ô–ö–ò –¢–ê–ô–ú–ê–£–¢–û–í –ò –ü–û–í–¢–û–†–ù–´–• –ó–ê–ü–†–û–°–û–í
# ============================================================================

# –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
TIMEOUTS = {
    'llm_request': 60,        # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
    'api_request': 30,        # –¢–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    'crew_execution': 300,    # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Crew
    'task_execution': 120,    # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    'retry_delay': 5,         # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    'max_retries': 1,         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
}

def retry_on_timeout(max_retries: int = 1, delay: float = 5.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_retries + 1):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    if attempt < max_retries:
                        print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        time.sleep(delay)
                    else:
                        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            error_str = str(last_exception).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            if "insufficient balance" in error_str or "badrequesterror" in error_str:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
                alternative_llm = switch_to_alternative_llm(llm, str(last_exception))
                if alternative_llm and alternative_llm != llm:
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
                    print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {alternative_llm.model}, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                    try:
                        return func(*args, **kwargs)
                    except Exception as retry_exception:
                        return f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–∂–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {str(retry_exception)}"
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if "timeout" in error_str or "timed out" in error_str:
                return "‚è∞ –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
            elif "insufficient balance" in error_str:
                return "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç."
            elif "badrequesterror" in error_str:
                return "üîß –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            else:
                return f"‚ùå –û—à–∏–±–∫–∞: {str(last_exception)}"
        
        return wrapper
    return decorator

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None
openai_api_key = os.getenv("OPENAI_API_KEY")
openai_api_base = os.getenv("OPENAI_API_BASE")
deepseek_api_key = os.getenv("DEEPSEEK_API_KEY")
anthropic_api_key = os.getenv("ANTHROPIC_API_KEY")
anthropic_api_base = os.getenv("ANTHROPIC_API_BASE")

if openai_api_key:
    os.environ["OPENAI_API_KEY"] = openai_api_key
if openai_api_base:
    os.environ["OPENAI_API_BASE"] = openai_api_base
if deepseek_api_key:
    os.environ["DEEPSEEK_API_KEY"] = deepseek_api_key
deepseek_api_base = os.getenv("DEEPSEEK_API_BASE")
if deepseek_api_base:
    os.environ["DEEPSEEK_API_BASE"] = deepseek_api_base
if anthropic_api_key:
    os.environ["ANTHROPIC_API_KEY"] = anthropic_api_key
if anthropic_api_base:
    os.environ["ANTHROPIC_API_BASE"] = anthropic_api_base

# –°–æ–∑–¥–∞–µ–º LLM –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏
llm_deepseek = None
llm_gpt4 = None
llm_anthropic = None
llm = None

<<<<<<< HEAD
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ LLM (–æ—Ç–¥–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞)
search_llm = None
proxyapi_search_key = os.getenv("PROXYAPI_SEARCH_KEY")
proxyapi_search_base = os.getenv("PROXYAPI_SEARCH_BASE")

if proxyapi_search_key:
    log_step("–°–û–ó–î–ê–ù–ò–ï –ü–û–ò–°–ö–û–í–û–ì–û LLM", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProxyAPI –¥–ª—è –ø–æ–∏—Å–∫–∞")
    try:
        from openai import OpenAI
        search_client = OpenAI(
            api_key=proxyapi_search_key,
            base_url=proxyapi_search_base or "https://api.proxyapi.ru/openai/v1"
        )
        search_llm = search_client
        log_step("–ü–û–ò–°–ö–û–í–´–ô LLM –°–û–ó–î–ê–ù", "ProxyAPI –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        log_step("–û–®–ò–ë–ö–ê –ü–û–ò–°–ö–û–í–û–ì–û LLM", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        search_llm = None
else:
    log_step("–ü–û–ò–°–ö–û–í–´–ô LLM –ù–ï–î–û–°–¢–£–ü–ï–ù", "PROXYAPI_SEARCH_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

if deepseek_api_key:
    log_step("–°–û–ó–î–ê–ù–ò–ï DEEPSEEK LLM", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek –º–æ–¥–µ–ª–∏")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è LiteLLM —Å ProxyAPI
        llm_deepseek = LLM(
            model="deepseek-reasoner",  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            api_key=deepseek_api_key,
            base_url=os.getenv("DEEPSEEK_API_BASE"),
            request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        )
        log_step("DEEPSEEK LLM –°–û–ó–î–ê–ù", "–ú–æ–¥–µ–ª—å deepseek-reasoner —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        log_step("–û–®–ò–ë–ö–ê DEEPSEEK LLM", f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        try:
            log_step("–ü–û–ü–´–¢–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", "deepseek-chat")
            llm_deepseek = LLM(
                model="deepseek-chat",
                api_key=deepseek_api_key,
                base_url=os.getenv("DEEPSEEK_API_BASE"),
                request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            log_step("DEEPSEEK LLM –°–û–ó–î–ê–ù", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å deepseek-chat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e2:
            log_step("–û–®–ò–ë–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e2}")
            llm_deepseek = None

=======
if deepseek_api_key:
    log_step("–°–û–ó–î–ê–ù–ò–ï DEEPSEEK LLM", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek –º–æ–¥–µ–ª–∏")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è LiteLLM —Å ProxyAPI
        llm_deepseek = LLM(
            model="deepseek-reasoner",  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            api_key=deepseek_api_key,
            base_url=os.getenv("DEEPSEEK_API_BASE"),
            request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        )
        log_step("DEEPSEEK LLM –°–û–ó–î–ê–ù", "–ú–æ–¥–µ–ª—å deepseek-reasoner —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        log_step("–û–®–ò–ë–ö–ê DEEPSEEK LLM", f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        try:
            log_step("–ü–û–ü–´–¢–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", "deepseek-chat")
            llm_deepseek = LLM(
                model="deepseek-chat",
                api_key=deepseek_api_key,
                base_url=os.getenv("DEEPSEEK_API_BASE"),
                request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            log_step("DEEPSEEK LLM –°–û–ó–î–ê–ù", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å deepseek-chat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e2:
            log_step("–û–®–ò–ë–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e2}")
            llm_deepseek = None

>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
if anthropic_api_key:
    log_step("–°–û–ó–î–ê–ù–ò–ï ANTHROPIC LLM", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude –º–æ–¥–µ–ª–∏")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LiteLLM –¥–ª—è Claude —á–µ—Ä–µ–∑ ProxyAPI
        llm_anthropic = LLM(
            model="claude-sonnet-4-20250514",
            api_key=anthropic_api_key,
            base_url=os.getenv("ANTHROPIC_API_BASE"),
            request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        )
        log_step("ANTHROPIC LLM –°–û–ó–î–ê–ù", "–ú–æ–¥–µ–ª—å claude-sonnet-4-20250514 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        log_step("–û–®–ò–ë–ö–ê ANTHROPIC LLM", f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
        try:
            log_step("–ü–û–ü–´–¢–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", "claude-sonnet-4")
            llm_anthropic = LLM(
                model="claude-sonnet-4",
                api_key=anthropic_api_key,
                base_url=os.getenv("ANTHROPIC_API_BASE"),
                request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            log_step("ANTHROPIC LLM –°–û–ó–î–ê–ù", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å claude-sonnet-4 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e2:
            log_step("–û–®–ò–ë–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e2}")
            llm_anthropic = None

if openai_api_key:
    log_step("–°–û–ó–î–ê–ù–ò–ï OPENAI LLM", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI GPT-4.1 –º–æ–¥–µ–ª–∏")
    try:
        llm_gpt4 = LLM(
            model="gpt-4.1-2025-04-14",
            api_key=openai_api_key,
            request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        )
        log_step("OPENAI LLM –°–û–ó–î–ê–ù", "–ú–æ–¥–µ–ª—å gpt-4.1-2025-04-14 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        log_step("–û–®–ò–ë–ö–ê OPENAI LLM", f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
        try:
            log_step("–ü–û–ü–´–¢–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", "gpt-4.1")
            llm_gpt4 = LLM(
                model="gpt-4.1",
                api_key=openai_api_key,
                request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            log_step("OPENAI LLM –°–û–ó–î–ê–ù", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å gpt-4.1 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e2:
            log_step("–û–®–ò–ë–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò", f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {e2}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
            try:
                log_step("–ü–û–ü–´–¢–ö–ê –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò", "gpt-4")
                llm_gpt4 = LLM(
                    model="gpt-4",
                    api_key=openai_api_key,
                    request_timeout=TIMEOUTS['llm_request']  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                )
                log_step("OPENAI LLM –°–û–ó–î–ê–ù", "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å gpt-4 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e3:
                log_step("–û–®–ò–ë–ö–ê –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò", f"–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {e3}")
                llm_gpt4 = None

# –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (GPT-4.1 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è)
if llm_gpt4:
    llm = llm_gpt4
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPT-4.1 (OpenAI) –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å")
elif llm_anthropic:
    llm = llm_anthropic
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Claude (Anthropic) –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å")
elif llm_deepseek:
    llm = llm_deepseek
    print("‚ö†Ô∏è  DeepSeek –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å")
else:
    print("‚ö†Ô∏è  API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

def get_working_llm():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π LLM –º–æ–¥–µ–ª–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    global llm
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    if llm and llm == llm_gpt4:
        return llm_gpt4
    elif llm and llm == llm_anthropic:
        return llm_anthropic
    elif llm and llm == llm_deepseek:
        return llm_deepseek
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é (GPT-4.1 –ø–µ—Ä–≤–∞—è)
    if llm_gpt4:
        return llm_gpt4
    elif llm_anthropic:
        return llm_anthropic
    elif llm_deepseek:
        return llm_deepseek
    else:
        return None

def switch_to_alternative_llm(current_llm, error_message: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (GPT-4.1 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è)"""
    global llm
    
    error_lower = error_message.lower()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å - GPT-4.1 –∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
    if current_llm == llm_gpt4 and ("insufficient balance" in error_lower or "badrequesterror" in error_lower):
        if llm_anthropic:
            log_step("–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò", f"GPT-4.1 ‚Üí Claude (–æ—à–∏–±–∫–∞: {error_message[:50]}...)")
            llm = llm_anthropic
            return llm_anthropic
        elif llm_deepseek:
            log_step("–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò", f"GPT-4.1 ‚Üí DeepSeek (–æ—à–∏–±–∫–∞: {error_message[:50]}...)")
            llm = llm_deepseek
            return llm_deepseek
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å - Claude –∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    elif current_llm == llm_anthropic and ("insufficient balance" in error_lower or "badrequesterror" in error_lower):
        if llm_gpt4:
            log_step("–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò", f"Claude ‚Üí GPT-4.1 (–æ—à–∏–±–∫–∞: {error_message[:50]}...)")
            llm = llm_gpt4
            return llm_gpt4
        elif llm_deepseek:
            log_step("–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò", f"Claude ‚Üí DeepSeek (–æ—à–∏–±–∫–∞: {error_message[:50]}...)")
            llm = llm_deepseek
            return llm_deepseek
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å - DeepSeek –∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å)
    elif current_llm == llm_deepseek and ("insufficient balance" in error_lower or "badrequesterror" in error_lower):
        if llm_gpt4:
            log_step("–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò", f"DeepSeek ‚Üí GPT-4.1 (–æ—à–∏–±–∫–∞: {error_message[:50]}...)")
            llm = llm_gpt4
            return llm_gpt4
        elif llm_anthropic:
            log_step("–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò", f"DeepSeek ‚Üí Claude (–æ—à–∏–±–∫–∞: {error_message[:50]}...)")
            llm = llm_anthropic
            return llm_anthropic
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    return current_llm

# ============================================================================
# –°–ò–°–¢–ï–ú–ê –î–í–û–ô–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò –° –î–í–£–ú–Ø AI –ú–û–î–ï–õ–Ø–ú–ò
# ============================================================================

class DualAITool(BaseTool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π"""
    
    name: str
    description: str
    
    def __init__(self, name: str, description: str, llm1: LLM, llm2: LLM):
        super().__init__(name=name, description=description)
        self._llm1 = llm1
        self._llm2 = llm2
    
    @retry_on_timeout(max_retries=TIMEOUTS['max_retries'], delay=TIMEOUTS['retry_delay'])
    def _run(self, query: str, context: str = "") -> str:
<<<<<<< HEAD
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–≤—É—Ö AI –∏ –∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞
            cache_key = f"dual_ai_{self._llm1.model}_{self._llm2.model}_{query}_{context}"
            cached_result = cache_manager.get(cache_key)
            
            if cached_result:
                log_step("–ê–ù–ê–õ–ò–ó –ò–ó –ö–ï–®–ê", f"–ú–æ–¥–µ–ª–∏: {self._llm1.model} + {self._llm2.model}")
                return cached_result
            
            log_step("–ê–ù–ê–õ–ò–ó AI –ú–û–î–ï–õ–Ø–ú–ò", f"–ú–æ–¥–µ–ª–∏: {self._llm1.model} + {self._llm2.model}")
=======
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–≤—É—Ö AI –∏ –∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
        try:
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            response1 = self._get_ai_response_with_timeout(self._llm1, query, context)
            response2 = self._get_ai_response_with_timeout(self._llm2, query, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
            if "–°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã" in response1 or "–°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã" in response2:
<<<<<<< HEAD
                error_msg = "‚è∞ –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
                cache_manager.set(cache_key, error_msg)
                return error_msg
=======
                return "‚è∞ –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
            comparison = self._compare_responses(response1, response2, query)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
            cache_manager.set(cache_key, comparison)
            
            return comparison
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç AI: {str(e)}"
            # –ù–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cache_key –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            return error_msg
    
    def _get_ai_response(self, llm: LLM, query: str, context: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π AI –º–æ–¥–µ–ª–∏"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_prompt = f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –ó–∞–ø—Ä–æ—Å: {query}
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π, —Ç–æ—á–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
            """
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ LLM
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return f"–û—Ç–≤–µ—Ç –æ—Ç {llm.model}: {query[:100]}..."
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {llm.model}: {str(e)}"
    
    def _get_ai_response_with_timeout(self, llm: LLM, query: str, context: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –º–æ–¥–µ–ª–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        try:
            print(f"ü§ñ –ó–∞–ø—Ä–æ—Å –∫ {llm.model}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
            context_short = context[:200] if context else ""
            query_short = query[:300] if query else ""
            
            full_prompt = f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_short}
            
            –ó–∞–ø—Ä–æ—Å: {query_short}
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤).
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            start_time = time.time()
            
            # –†–ï–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–° –ö LLM (–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)
            try:
                # TODO: –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
                # response = llm.complete(full_prompt)
                # return response.content
                
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                response = f"–û—Ç–≤–µ—Ç –æ—Ç {llm.model}: {query_short[:100]}..."
                print(f"‚úÖ {llm.model} –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {time.time() - start_time:.2f}—Å")
                
                return response
                
            except Exception as llm_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ LLM {llm.model}: {str(llm_error)}")
                return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {llm.model}: {str(llm_error)}"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {llm.model}: {str(e)}")
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç {llm.model}: {str(e)}"
    
    def _compare_responses(self, response1: str, response2: str, query: str) -> str:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π"""
        
        comparison_result = f"""
        ============================================================================
        –°–†–ê–í–ù–ï–ù–ò–ï –û–¢–í–ï–¢–û–í –û–¢ –î–í–£–• AI –ú–û–î–ï–õ–ï–ô
        ============================================================================
        
        –ó–ê–ü–†–û–°: {query}
        
        –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò 1 ({self._llm1.model}):
        {response1}
        
        –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò 2 ({self._llm2.model}):
        {response2}
        
        –ê–ù–ê–õ–ò–ó –°–•–û–î–°–¢–í –ò –†–ê–ó–õ–ò–ß–ò–ô:
        """
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞
        similarities = self._find_similarities(response1, response2)
        comparison_result += f"\n–°–•–û–î–°–¢–í–ê:\n{similarities}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        differences = self._find_differences(response1, response2)
        comparison_result += f"\n\n–†–ê–ó–õ–ò–ß–ò–Ø:\n{differences}"
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_assessment = self._assess_quality(response1, response2)
        comparison_result += f"\n\n–û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:\n{quality_assessment}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–æ–±—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        final_conclusion = self._create_final_conclusion(response1, response2, similarities, differences)
        comparison_result += f"\n\n–û–ë–û–ë–©–ï–ù–ù–´–ô –í–´–í–û–î:\n{final_conclusion}"
        
        return comparison_result
    
    def _find_similarities(self, response1: str, response2: str) -> str:
        """–ü–æ–∏—Å–∫ —Å—Ö–æ–¥—Å—Ç–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        words1 = set(response1.lower().split())
        words2 = set(response2.lower().split())
        common_words = words1.intersection(words2)
        
        return f"–û–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(list(common_words)[:10])}"
    
    def _find_differences(self, response1: str, response2: str) -> str:
        """–ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–∏–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –≤ –ø–æ–¥—Ö–æ–¥–∞—Ö –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        len1, len2 = len(response1), len(response2)
        detail_diff = f"–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: –ú–æ–¥–µ–ª—å 1 ({len1} —Å–∏–º–≤–æ–ª–æ–≤) vs –ú–æ–¥–µ–ª—å 2 ({len2} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        return f"–†–∞–∑–ª–∏—á–∏—è –≤ –æ–±—ä–µ–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {detail_diff}"
    
    def _assess_quality(self, response1: str, response2: str) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        quality_metrics = []
        
        # –û—Ü–µ–Ω–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        detail_score1 = len(response1.split()) / 100  # —Å–ª–æ–≤ –Ω–∞ 100
        detail_score2 = len(response2.split()) / 100
        quality_metrics.append(f"–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: –ú–æ–¥–µ–ª—å 1 ({detail_score1:.1f}/10) vs –ú–æ–¥–µ–ª—å 2 ({detail_score2:.1f}/10)")
        
        # –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        structure_score1 = response1.count('\n') / 10
        structure_score2 = response2.count('\n') / 10
        quality_metrics.append(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: –ú–æ–¥–µ–ª—å 1 ({structure_score1:.1f}/10) vs –ú–æ–¥–µ–ª—å 2 ({structure_score2:.1f}/10)")
        
        return "\n".join(quality_metrics)
    
    def _create_final_conclusion(self, response1: str, response2: str, similarities: str, differences: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        return f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π:
        
        ‚úÖ –°–û–í–ü–ê–î–ê–Æ–©–ò–ï –í–´–í–û–î–´: {similarities[:100]}...
        ‚ö†Ô∏è –†–ê–ó–õ–ò–ß–ê–Æ–©–ò–ï–°–Ø –ê–°–ü–ï–ö–¢–´: {differences[:100]}...
        
        –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–æ–±—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, 
        —É—á–∏—Ç—ã–≤–∞—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏.
        """

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å LLM
dual_cbrf_tool = None
dual_moex_tool = None
dual_news_tool = None
dual_financial_tool = None

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM –¥–ª—è –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (GPT-4.1 –ø–µ—Ä–≤–∞—è, Claude –≤—Ç–æ—Ä–∞—è, DeepSeek –ø–æ—Å–ª–µ–¥–Ω—è—è)
available_llms = []
if llm_gpt4:
    available_llms.append(("GPT-4.1", llm_gpt4))
if llm_anthropic:
    available_llms.append(("Claude", llm_anthropic))
if llm_deepseek:
    available_llms.append(("DeepSeek", llm_deepseek))

# –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –î–í–û–ô–ù–£–Æ –í–ê–õ–ò–î–ê–¶–ò–Æ - –ì–õ–ê–í–ù–ê–Ø –§–ò–ß–ê!
if len(available_llms) >= 2:
    log_step("–°–û–ó–î–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        llm1_name, llm1 = available_llms[0]
        llm2_name, llm2 = available_llms[1]
        
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {llm1_name} + {llm2_name}")
        
        dual_cbrf_tool = DualAITool(
            name="dual_cbrf_api_tool",
            description=f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¶–ë –†–§ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π AI ({llm1_name} + {llm2_name})",
            llm1=llm1,
            llm2=llm2
        )
        
        dual_moex_tool = DualAITool(
            name="dual_moex_api_tool", 
            description=f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç MOEX —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π AI ({llm1_name} + {llm2_name})",
            llm1=llm1,
            llm2=llm2
        )
        
        dual_news_tool = DualAITool(
            name="dual_news_api_tool",
            description=f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π AI ({llm1_name} + {llm2_name})", 
            llm1=llm1,
            llm2=llm2
        )
        
        dual_financial_tool = DualAITool(
            name="dual_financial_analysis_tool",
            description=f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π AI ({llm1_name} + {llm2_name})",
            llm1=llm1, 
            llm2=llm2
        )
        log_step("–ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –°–û–ó–î–ê–ù–´", f"4 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ({llm1_name} + {llm2_name})")
    except Exception as e:
        log_step("–û–®–ò–ë–ö–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
else:
    available_names = [name for name, _ in available_llms]
    log_step("–î–í–û–ô–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï–î–û–°–¢–£–ü–ù–ê", f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_names}")

# ============================================================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° API
# ============================================================================

class CBRFTool(BaseTool):
    name: str = "cbrf_api_tool"
    description: str = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–§"

    @retry_on_timeout(max_retries=TIMEOUTS['max_retries'], delay=TIMEOUTS['retry_delay'])
    def _run(self, query: str) -> str:
<<<<<<< HEAD
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¶–ë –†–§ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
            cache_key = f"cbrf_{query}"
            cached_result = cache_manager.get(cache_key)
            
            if cached_result:
                log_step("–¶–ë –†–§ –ò–ó –ö–ï–®–ê", f"–ó–∞–ø—Ä–æ—Å: {query}")
                return cached_result
            
            log_step("–ó–ê–ü–†–û–° –¶–ë –†–§", f"–ó–∞–ø—Ä–æ—Å: {query}")
=======
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¶–ë –†–§ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            print(f"üè¶ –ó–∞–ø—Ä–æ—Å –∫ API –¶–ë –†–§: {query}")
            
            # –ë–∞–∑–æ–≤—ã–π URL API –¶–ë –†–§
            base_url = "http://www.cbr.ru/dataservice"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            if "publications" in query.lower():
                response = requests.get(f"{base_url}/publications", timeout=TIMEOUTS['api_request'])
<<<<<<< HEAD
                result = f"–°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¶–ë –†–§: {response.text[:500]}..."
                cache_manager.set(cache_key, result)
                return result
=======
                return f"–°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¶–ë –†–§: {response.text[:500]}..."
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
            elif "datasets" in query.lower():
                # –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                response = requests.get(f"{base_url}/datasets?publicationId=1", timeout=TIMEOUTS['api_request'])
<<<<<<< HEAD
                result = f"–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {response.text[:500]}..."
                cache_manager.set(cache_key, result)
                return result
=======
                return f"–î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {response.text[:500]}..."
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            
            result = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'publications' –∏–ª–∏ 'datasets' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            cache_manager.set(cache_key, result)
            return result
            
        except requests.Timeout:
<<<<<<< HEAD
            error_msg = "‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¶–ë –†–§"
            print(error_msg)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –æ—à–∏–±–∫–∏
            error_cache_key = f"cbrf_error_{query}"
            cache_manager.set(error_cache_key, error_msg)
            return error_msg
=======
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¶–ë –†–§")
            return "‚è∞ –°–µ—Ä–≤–µ—Ä—ã –¶–ë –†–§ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –¶–ë –†–§: {str(e)}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –æ—à–∏–±–∫–∏
            error_cache_key = f"cbrf_error_{query}"
            cache_manager.set(error_cache_key, error_msg)
            return error_msg

class MOEXTool(BaseTool):
    name: str = "moex_api_tool"
    description: str = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏"

    @retry_on_timeout(max_retries=TIMEOUTS['max_retries'], delay=TIMEOUTS['retry_delay'])
    def _run(self, query: str) -> str:
<<<<<<< HEAD
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
            cache_key = f"moex_{query}"
            cached_result = cache_manager.get(cache_key)
            
            if cached_result:
                log_step("MOEX –ò–ó –ö–ï–®–ê", f"–ó–∞–ø—Ä–æ—Å: {query}")
                return cached_result
            
            log_step("–ó–ê–ü–†–û–° MOEX", f"–ó–∞–ø—Ä–æ—Å: {query}")
=======
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            print(f"üìà –ó–∞–ø—Ä–æ—Å –∫ API MOEX: {query}")
            
            base_url = "https://iss.moex.com/iss"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥–∞—Ö
            if "securities" in query.lower():
                response = requests.get(f"{base_url}/securities.json", timeout=TIMEOUTS['api_request'])
<<<<<<< HEAD
                result = f"–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥–∞—Ö: {response.text[:500]}..."
                cache_manager.set(cache_key, result)
                return result
=======
                return f"–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥–∞—Ö: {response.text[:500]}..."
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            elif "history" in query.lower():
                # –ü—Ä–∏–º–µ—Ä: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º
                response = requests.get(f"{base_url}/history/engines/stock/markets/shares/securities.json?date=2024-01-01")
                result = f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {response.text[:500]}..."
                cache_manager.set(cache_key, result)
                return result
            
            result = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'securities' –∏–ª–∏ 'history' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            cache_manager.set(cache_key, result)
            return result
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API MOEX: {str(e)}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –æ—à–∏–±–∫–∏
            error_cache_key = f"moex_error_{query}"
            cache_manager.set(error_cache_key, error_msg)
            return error_msg

class RealTimeSearchTool(BaseTool):
    name: str = "real_time_search_tool"
    description: str = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"

    @retry_on_timeout(max_retries=TIMEOUTS['max_retries'], delay=TIMEOUTS['retry_delay'])
    def _run(self, company_name: str, search_type: str = "comprehensive") -> str:
        """–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if not search_llm:
                return "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PROXYAPI_SEARCH_KEY"
            
            current_date = datetime.now().strftime('%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if search_type == "stock_price":
                search_query = f"—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–π {company_name} –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ {current_date}"
            elif search_type == "news":
                search_query = f"–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ {company_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π {current_date}"
            elif search_type == "financial":
                search_query = f"—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {company_name} –æ—Ç—á–µ—Ç—ã 2025 {current_date}"
            else:
                search_query = f"–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name} {current_date} –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞
            cache_key = f"search_{company_name}_{search_type}_{current_date}"
            cached_result = cache_manager.get(cache_key)
            
            if cached_result:
                log_step("–ü–û–ò–°–ö –ò–ó –ö–ï–®–ê", f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}, —Ç–∏–ø: {search_type}")
                return cached_result
            
            log_step("–ü–û–ò–°–ö –í –ò–ù–¢–ï–†–ù–ï–¢–ï", f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}, —Ç–∏–ø: {search_type}")
            print(f"üîç –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {search_query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ ProxyAPI
            try:
                response = search_llm.responses.create(
                    model="gpt-4o",
                    tools=[{
                        "type": "web_search_preview",
                        "search_context_size": "high",  # –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        "user_location": {
                            "type": "approximate",
                            "country": "RU"
                        }
                    }],
                    input=search_query
                )
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                search_results = []
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    response_str = str(response)
                    search_results.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{company_name}': {response_str}")
                except Exception as parse_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {parse_error}")
                    search_results.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {str(response)}")
                
                if search_results:
                    combined_results = "\n\n".join(search_results)
                    result = f"""
                    üîç –ê–ö–¢–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –û –ö–û–ú–ü–ê–ù–ò–ò {company_name.upper()}
                    üìÖ –î–ê–¢–ê –ü–û–ò–°–ö–ê: {current_date}
                    
                    {combined_results}
                    
                    ‚ö†Ô∏è –í–ê–ñ–ù–û: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ {current_date}
                    """
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
                    cache_manager.set(cache_key, result)
                    return result
                else:
                    error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name} –Ω–∞ {current_date}"
                    cache_manager.set(cache_key, error_msg)
                    return error_msg
                    
            except Exception as search_error:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ ProxyAPI: {str(search_error)}"
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {error_msg}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –æ—à–∏–±–∫–∏
                error_cache_key = f"search_error_{company_name}_{search_type}_{current_date}"
                cache_manager.set(error_cache_key, error_msg)
                return error_msg
                
        except Exception as e:
            error_msg = f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {error_msg}")
            return error_msg

class NewsTool(BaseTool):
    name: str = "news_api_tool"
    description: str = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö"

    def _run(self, company_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
<<<<<<< HEAD
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
            cache_key = f"news_{company_name}"
            cached_result = cache_manager.get(cache_key)
            
            if cached_result:
                log_step("–ù–û–í–û–°–¢–ò –ò–ó –ö–ï–®–ê", f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}")
                return cached_result
            
            log_step("–ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–°–¢–ï–ô", f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}")
            
=======
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
            sample_news = [
                f"üì∞ {company_name} –æ–±—ä—è–≤–∏–ª–∞ –æ —Ä–æ—Å—Ç–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 15%",
                f"üìà –ê–∫—Ü–∏–∏ {company_name} –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 3.2%",
                f"üè¢ {company_name} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ñ–∏—Å –≤ –ú–æ—Å–∫–≤–µ"
            ]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º numpy –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä)
            sentiment_scores = np.array([0.8, 0.6, 0.4])  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            avg_sentiment = np.mean(sentiment_scores)
            
            news_result = f"""
            üì∞ –ù–û–í–û–°–¢–ò –û –ö–û–ú–ü–ê–ù–ò–ò {company_name.upper()}:
            
            {'\n'.join(sample_news)}
            
            üìä –ê–ù–ê–õ–ò–ó –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º numpy):
            ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {avg_sentiment:.2f} (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è)
            ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(sample_news)}
            ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(sentiment_scores):.2f}
            
            üîç –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ 
            –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BeautifulSoup –∏ lxml.
            """
<<<<<<< HEAD
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
            cache_manager.set(cache_key, news_result)
            return news_result
            
=======
            return news_result
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –æ—à–∏–±–∫–∏
            error_cache_key = f"news_error_{company_name}"
            cache_manager.set(error_cache_key, error_msg)
            return error_msg

class FinancialAnalysisTool(BaseTool):
    name: str = "financial_analysis_tool"
    description: str = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"

    def _run(self, company_data: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
<<<<<<< HEAD
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞
            cache_key = f"financial_{company_data[:100]}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∫–ª—é—á
            cached_result = cache_manager.get(cache_key)
            
            if cached_result:
                log_step("–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó –ò–ó –ö–ï–®–ê", f"–î–∞–Ω–Ω—ã–µ: {company_data[:50]}...")
                return cached_result
            
            log_step("–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó", f"–î–∞–Ω–Ω—ã–µ: {company_data[:50]}...")
            
=======
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pandas –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            if company_data and len(company_data) > 10:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                sample_data = {
                    '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': ['–í—ã—Ä—É—á–∫–∞', '–ü—Ä–∏–±—ã–ª—å', '–ê–∫—Ç–∏–≤—ã', '–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [1000000, 150000, 2000000, 800000],
                    '–ï–¥–∏–Ω–∏—Ü–∞': ['—Ä—É–±.', '—Ä—É–±.', '—Ä—É–±.', '—Ä—É–±.']
                }
                df = pd.DataFrame(sample_data)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å = df.loc[df['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'] == '–ü—Ä–∏–±—ã–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'].iloc[0] / df.loc[df['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'] == '–í—ã—Ä—É—á–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'].iloc[0] * 100
                –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å = df.loc[df['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'] == '–ê–∫—Ç–∏–≤—ã', '–ó–Ω–∞—á–µ–Ω–∏–µ'].iloc[0] / df.loc[df['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'] == '–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'].iloc[0]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º numpy –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
                –∑–Ω–∞—á–µ–Ω–∏—è = np.array(df['–ó–Ω–∞—á–µ–Ω–∏–µ'].tolist())
                —Å—Ä–µ–¥–Ω–µ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ = np.mean(–∑–Ω–∞—á–µ–Ω–∏—è)
                –º–µ–¥–∏–∞–Ω–∞ = np.median(–∑–Ω–∞—á–µ–Ω–∏—è)
                —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = np.std(–∑–Ω–∞—á–µ–Ω–∏—è)
                
                analysis_result = f"""
                üìä –ê–ù–ê–õ–ò–ó –§–ò–ù–ê–ù–°–û–í–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pandas + numpy):
                
                {df.to_string(index=False)}
                
                üìà –†–ê–°–ß–ï–¢ –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:
                ‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂: {—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å:.1f}%
                ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:.2f}
                
                üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (numpy):
                ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {—Å—Ä–µ–¥–Ω–µ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ:,.0f} —Ä—É–±.
                ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {–º–µ–¥–∏–∞–Ω–∞:,.0f} —Ä—É–±.
                ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:,.0f} —Ä—É–±.
                
                üìã –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï: {company_data[:200]}...
                """
<<<<<<< HEAD
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
                cache_manager.set(cache_key, analysis_result)
                return analysis_result
            else:
                result = f"–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {company_data[:200]}..."
                cache_manager.set(cache_key, result)
                return result
                
=======
                return analysis_result
            else:
                return f"–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {company_data[:200]}..."
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –æ—à–∏–±–∫–∏
            error_cache_key = f"financial_error_{company_data[:50] if company_data else 'unknown'}"
            cache_manager.set(error_cache_key, error_msg)
            return error_msg

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
real_time_search_tool = RealTimeSearchTool()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
cbrf_tool = CBRFTool()
moex_tool = MOEXTool()
news_tool = NewsTool()
financial_tool = FinancialAnalysisTool()

# ============================================================================
# –ê–ì–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´ –ü–û–î–î–ï–†–ñ–ö–ò –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô
# ============================================================================

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
def get_available_tools():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    tools = []
    if dual_cbrf_tool:
        tools.append(dual_cbrf_tool)
    if dual_moex_tool:
        tools.append(dual_moex_tool)
    if dual_news_tool:
        tools.append(dual_news_tool)
    if dual_financial_tool:
        tools.append(dual_financial_tool)
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tools.extend([cbrf_tool, moex_tool, news_tool, financial_tool])
<<<<<<< HEAD
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if real_time_search_tool:
        tools.append(real_time_search_tool)
=======
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    return tools

# –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–µ–π—Å–æ–≤ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
case_analyst = Agent(
    role="–ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–µ–π—Å–æ–≤",
    goal="–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–µ–π—Å-—Å—Ç–∞–¥–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π AI",
    backstory="""–í—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π –∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–µ–π. 
    –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∫–µ–π—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
    –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–≤–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞.""",
    verbose=True,
    allow_delegation=False,
    tools=get_available_tools(),
    llm=llm
)

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
financial_analyst = Agent(
    role="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫",
    goal="–û—Ü–µ–Ω–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
    backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö. 
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤, —Ä–∞—Å—á–µ—Ç–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –æ—Ü–µ–Ω–∫–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–≤–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –∫—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—á–µ—Ç–æ–≤.""",
    verbose=True,
    allow_delegation=False,
    tools=get_available_tools(),
    llm=llm
)

# –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
company_analyst = Agent(
    role="–ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏",
    goal="–ò–∑—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
    backstory="""–í—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–ø–∞–Ω–∏–π –∏ –æ—Ç—Ä–∞—Å–ª–µ–π. –ò–∑—É—á–∞–µ—Ç–µ –≤–µ–±-—Å–∞–π—Ç—ã, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, 
    –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑—ã –∏ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–≤–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤.""",
    verbose=True,
    allow_delegation=False,
    tools=get_available_tools(),
    llm=llm
)

# –ê–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –ª–∏—Ü–∞–º, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º —Ä–µ—à–µ–Ω–∏—è —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
decision_maker_analyst = Agent(
    role="–ê–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –ª–∏—Ü–∞–º, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º —Ä–µ—à–µ–Ω–∏—è",
    goal="–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∏–≥—É—Ä–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –±–∏–∑–Ω–µ—Å —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
    backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–ø–∞–Ω–∏–π. –ò–∑—É—á–∞–µ—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏, –æ–ø—ã—Ç, 
    —Å—Ç–∏–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ª–∏—Ü –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±—É–¥—É—â–µ–µ –∫–æ–º–ø–∞–Ω–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–≤–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ö –≤–ª–∏—è–Ω–∏—è.""",
    verbose=True,
    allow_delegation=False,
    tools=get_available_tools(),
    llm=llm
)

# –ê–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
news_analyst = Agent(
    role="–ê–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π",
    goal="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä—ã–Ω–æ–∫ –∏ –∫–æ–º–ø–∞–Ω–∏—é —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
    backstory="""–í—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä—ã–Ω–∫–∏. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ 
    –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∞–∫—Ü–∏–∏ –∏ –¥–∞–µ—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–≤–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ü–µ–Ω–∫–∏ –∏—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è.""",
    verbose=True,
    allow_delegation=False,
    tools=get_available_tools(),
    llm=llm
)

# –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ä–∏—Å–∫–∞–º —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
risk_advisor = Agent(
    role="–°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ä–∏—Å–∫–∞–º",
    goal="–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
    backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ä–∏—Å–∫–æ–≤ 
    (—Ä—ã–Ω–æ—á–Ω—ã–µ, –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ) –∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–≤–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.""",
    verbose=True,
    allow_delegation=False,
    tools=get_available_tools(),
    llm=llm
)

<<<<<<< HEAD
# ============================================================================
# –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ê–ì–ï–ù–¢–´-–í–ê–õ–ò–î–ê–¢–û–†–´ –° –î–í–û–ô–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ï–ô
# ============================================================================

class ValidationAgent(Agent):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, role: str, goal: str, backstory: str, llm1: LLM, llm2: LLM, tools: List[BaseTool]):
        super().__init__(
            role=role,
            goal=goal,
            backstory=backstory,
            verbose=True,
            allow_delegation=False,
            tools=tools,
            llm=llm1  # –û—Å–Ω–æ–≤–Ω–∞—è LLM –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        )
        self._llm1 = llm1
        self._llm2 = llm2
        self._validation_cache = {}
    
    def validate_analysis(self, agent_result: str, analysis_type: str, context: str = "") -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤—É–º—è LLM —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            cache_key = f"validation_{analysis_type}_{hash(agent_result + context)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cached_validation = cache_manager.get(cache_key)
            if cached_validation:
                log_step("–í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ó –ö–ï–®–ê", f"–¢–∏–ø: {analysis_type}")
                return cached_validation
            
            log_step("–í–ê–õ–ò–î–ê–¶–ò–Ø –î–í–£–ú–Ø LLM", f"–¢–∏–ø: {analysis_type}, –ú–æ–¥–µ–ª–∏: {self._llm1.model} + {self._llm2.model}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ç –¥–≤—É—Ö LLM
            validation1 = self._get_validation_response(self._llm1, agent_result, analysis_type, context)
            validation2 = self._get_validation_response(self._llm2, agent_result, analysis_type, context)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            final_validation = self._compare_validations(validation1, validation2, agent_result, analysis_type)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            cache_manager.set(cache_key, final_validation)
            
            return final_validation
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {analysis_type}: {str(e)}"
            log_step("–û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò", error_msg)
            return error_msg
    
    def _get_validation_response(self, llm: LLM, agent_result: str, analysis_type: str, context: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π LLM"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validation_prompt = f"""
            –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê: {analysis_type.upper()}
            
            –ö–û–ù–¢–ï–ö–°–¢: {context}
            
            –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ì–ï–ù–¢–ê:
            {agent_result}
            
            –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
            1. –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤
            2. –ü–æ–ª–Ω–æ—Ç—É –∞–Ω–∞–ª–∏–∑–∞
            3. –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            4. –û–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            5. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É–ø—É—â–µ–Ω–∏—è
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω.
            """
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            validation_prompt = validation_prompt[:2000]
            
            # TODO: –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
            # response = llm.complete(validation_prompt)
            # return response.content
            
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            response = f"–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç {llm.model}: –ê–Ω–∞–ª–∏–∑ {analysis_type} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π..."
            return response
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç {llm.model}: {str(e)}"
    
    def _compare_validations(self, validation1: str, validation2: str, agent_result: str, analysis_type: str) -> str:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç –¥–≤—É—Ö LLM"""
        
        comparison_result = f"""
        ============================================================================
        –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê: {analysis_type.upper()}
        ============================================================================
        
        –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ì–ï–ù–¢–ê:
        {agent_result[:500]}...
        
        –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–ï–õ–ò 1 ({self._llm1.model}):
        {validation1}
        
        –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–ï–õ–ò 2 ({self._llm2.model}):
        {validation2}
        
        –û–ë–û–ë–©–ï–ù–ù–ê–Ø –û–¶–ï–ù–ö–ê:
        """
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–π
        agreement_level = self._assess_agreement(validation1, validation2)
        comparison_result += f"\n–£–†–û–í–ï–ù–¨ –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò: {agreement_level}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        final_recommendations = self._create_final_recommendations(validation1, validation2, agent_result)
        comparison_result += f"\n\n–§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n{final_recommendations}"
        
        return comparison_result
    
    def _assess_agreement(self, validation1: str, validation2: str) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –≤–∞–ª–∏–¥–∞—Ü–∏—è–º–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        positive_words = ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '—Ç–æ—á–Ω—ã–π', '–ø–æ–ª–Ω—ã–π', '–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π', '–ª–æ–≥–∏—á–Ω—ã–π']
        negative_words = ['–æ—à–∏–±–∫–∞', '—É–ø—É—â–µ–Ω–∏–µ', '–Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å', '–Ω–µ–ø–æ–ª–Ω—ã–π', '—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π']
        
        pos1 = sum(1 for word in positive_words if word in validation1.lower())
        pos2 = sum(1 for word in positive_words if word in validation2.lower())
        neg1 = sum(1 for word in negative_words if word in validation1.lower())
        neg2 = sum(1 for word in negative_words if word in validation2.lower())
        
        if pos1 > neg1 and pos2 > neg2:
            return "–í–´–°–û–ö–ò–ô - –û–±–µ –º–æ–¥–µ–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞"
        elif pos1 > neg1 or pos2 > neg2:
            return "–°–†–ï–î–ù–ò–ô - –ú–æ–¥–µ–ª–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏"
        else:
            return "–ù–ò–ó–ö–ò–ô - –û–±–µ –º–æ–¥–µ–ª–∏ –≤—ã—è–≤–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã"
    
    def _create_final_recommendations(self, validation1: str, validation2: str, agent_result: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–∞—Ü–∏–π"""
        return f"""
        ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï –í–´–í–û–î–´: –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã
        ‚ö†Ô∏è –¢–†–ï–ë–£–Æ–©–ò–ï –£–¢–û–ß–ù–ï–ù–ò–Ø: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        üîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        """

# –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤–µ LLM
case_validator = None
financial_validator = None
company_validator = None
leadership_validator = None
news_validator = None
risk_validator = None
final_validator = None

if len(available_llms) >= 2:
    log_step("–°–û–ó–î–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¢–û–†–û–í", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤")
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        llm1_name, llm1 = available_llms[0]
        llm2_name, llm2 = available_llms[1]
        
        print(f"ü§ñ –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏: {llm1_name} + {llm2_name}")
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–µ–π—Å-–∞–Ω–∞–ª–∏–∑–∞
        case_validator = ValidationAgent(
            role="–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–µ–π—Å-–∞–Ω–∞–ª–∏–∑–∞",
            goal="–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–µ–π—Å-—Å—Ç–∞–¥–∏ —Å –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π AI",
            backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ–π—Å-–∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ 
            –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–æ–≤ –∫ —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.""",
            llm1=llm1,
            llm2=llm2,
            tools=get_available_tools()
        )
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        financial_validator = ValidationAgent(
            role="–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            goal="–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π AI",
            backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å 
            —Ä–∞—Å—á–µ—Ç–æ–≤, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.""",
            llm1=llm1,
            llm2=llm2,
            tools=get_available_tools()
        )
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        company_validator = ValidationAgent(
            role="–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏",
            goal="–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏",
            backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ 
            –æ—Ü–µ–Ω–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤.""",
            llm1=llm1,
            llm2=llm2,
            tools=get_available_tools()
        )
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        leadership_validator = ValidationAgent(
            role="–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
            goal="–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏",
            backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–π. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ 
            –æ—Ü–µ–Ω–∫–∏ –æ–ø—ã—Ç–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞, —Å—Ç–∏–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é.""",
            llm1=llm1,
            llm2=llm2,
            tools=get_available_tools()
        )
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_validator = ValidationAgent(
            role="–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π",
            goal="–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏—è",
            backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ 
            –æ—Ü–µ–Ω–∫–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π, –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∞–∫—Ü–∏–∏ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.""",
            llm1=llm1,
            llm2=llm2,
            tools=get_available_tools()
        )
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
        risk_validator = ValidationAgent(
            role="–í–∞–ª–∏–¥–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤",
            goal="–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –ø–æ–ª–Ω–æ—Ç—É 
            –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∏—Å–∫–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.""",
            llm1=llm1,
            llm2=llm2,
            tools=get_available_tools()
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        final_validator = ValidationAgent(
            role="–§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä",
            goal="–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–æ–±—â–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞",
            backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å 
            –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤—ã—è–≤–ª—è–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç–µ –æ–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.""",
            llm1=llm1,
            llm2=llm2,
            tools=get_available_tools()
        )
        
        log_step("–í–ê–õ–ò–î–ê–¢–û–†–´ –°–û–ó–î–ê–ù–´", f"7 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ({llm1_name} + {llm2_name})")
        
    except Exception as e:
        log_step("–û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¢–û–†–û–í", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤: {e}")
else:
    available_names = [name for name, _ in available_llms]
    log_step("–í–ê–õ–ò–î–ê–¢–û–†–´ –ù–ï–î–û–°–¢–£–ü–ù–´", f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_names}")
=======
# –ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
validation_agent = Agent(
    role="–ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä",
    goal="–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π",
    backstory="""–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±–æ–±—â–µ–Ω–∏—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - 
    –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤, –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ —Å–æ–∑–¥–∞—Ç—å 
    —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–≤–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π 
    —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤.""",
    verbose=True,
    allow_delegation=False,
    tools=get_available_tools(),
    llm=llm
)
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)

# ============================================================================
# –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–î–ê–ß
# ============================================================================

def create_investment_analysis_tasks(company_name: str) -> List[Task]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    # –ó–∞–¥–∞—á–∞ 1: –ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–æ–≤ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    case_analysis_task = Task(
        description=f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–µ–π—Å-—Å—Ç–∞–¥–∏ –ø—Ä–∏–º–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
        
        üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)!
        
        –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–æ–π–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é AI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –∞–Ω–∞–ª–∏–∑–∞!
        
        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. üîç –ù–∞–π–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name} (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ real_time_search_tool)
        2. üìä –ù–∞–π–¥–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ç–æ–π –∂–µ –æ—Ç—Ä–∞—Å–ª–∏ (–≤–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ —Å –¥–≤—É–º—è AI)
        3. üìà –ò–∑—É—á–∏—Ç–µ –∏—Ö –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è (—Å—Ä–∞–≤–Ω–∏—Ç–µ –≤—ã–≤–æ–¥—ã –¥–≤—É—Ö AI)
        4. üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ –∏ –Ω–µ—É–¥–∞—á (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)
        5. üí° –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —É—Ä–æ–∫–∏, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫ {company_name} (–æ–±–æ–±—â–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        
        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ real_time_search_tool –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        - –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - –ï—Å–ª–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - —á–µ—Ç–∫–æ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ
        - –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π
        - –°—Ä–∞–≤–Ω–∏—Ç–µ –∏—Ö –≤—ã–≤–æ–¥—ã –∏ –≤—ã—è–≤–∏—Ç–µ —Å—Ö–æ–¥—Å—Ç–≤–∞/—Ä–∞–∑–ª–∏—á–∏—è
        - –°–æ–∑–¥–∞–π—Ç–µ –æ–±–æ–±—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –æ—Ç—Ä–∞—Å–ª—è—Ö.
        """,
        agent=case_analyst,
        expected_output="–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–µ–π—Å-—Å—Ç–∞–¥–∏ —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π AI –∏ –æ–±–æ–±—â–µ–Ω–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏"
    )
    
    # –ó–∞–¥–∞—á–∞ 2: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    financial_analysis_task = Task(
        description=f"""
        –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
        
        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        2. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (P/E, P/B, ROE, ROA, –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)
        3. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        4. –û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        5. –°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π.
        """,
        agent=financial_analyst,
        expected_output="–î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"
    )
    
    # –ó–∞–¥–∞—á–∞ 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏
    company_analysis_task = Task(
        description=f"""
        –ò–∑—É—á–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
        
        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏
        2. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
        3. –û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –∏ –∏–º–∏–¥–∂
        4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        5. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–æ–∑–∏—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        
        –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –±–∏–∑–Ω–µ—Å–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.
        """,
        agent=company_analyst,
        expected_output="–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"
    )
    
    # –ó–∞–¥–∞—á–∞ 4: –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    leadership_analysis_task = Task(
        description=f"""
        –ò–∑—É—á–∏—Ç–µ –∫–ª—é—á–µ–≤—ã—Ö –ª–∏—Ü –∫–æ–º–ø–∞–Ω–∏–∏ {company_name} –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å.
        
        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ
        2. –ò–∑—É—á–∏—Ç–µ –∏—Ö –æ–ø—ã—Ç –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç–∏–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        4. –û—Ü–µ–Ω–∏—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        5. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
        
        –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—é, –æ–ø—ã—Ç –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.
        """,
        agent=decision_maker_analyst,
        expected_output="–ê–Ω–∞–ª–∏–∑ —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∏ –æ—Ü–µ–Ω–∫–∞ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é"
    )
    
    # –ó–∞–¥–∞—á–∞ 5: –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
    news_analysis_task = Task(
        description=f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω –≤–æ–∫—Ä—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
        
        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –°–æ–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
        2. –û—Ü–µ–Ω–∏—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è)
        3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∞–∫—Ü–∏–∏
        4. –ò–∑—É—á–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ
        5. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
        
        –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3-6 –º–µ—Å—è—Ü–µ–≤.
        """,
        agent=news_analyst,
        expected_output="–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ —Å –æ—Ü–µ–Ω–∫–æ–π –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    )
    
    # –ó–∞–¥–∞—á–∞ 6: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
    risk_assessment_task = Task(
        description=f"""
        –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ {company_name}.
        
        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –û—Ü–µ–Ω–∏—Ç–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ä–∏—Å–∫–∏ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏)
        2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ä–∏—Å–∫–∏
        3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∏—Å–∫–∏
        4. –û—Ü–µ–Ω–∏—Ç–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        5. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤.
        """,
        agent=risk_advisor,
        expected_output="–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"
    )
    
    # –ó–∞–¥–∞—á–∞ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–æ–±—â–µ–Ω–∏–µ
    validation_task = Task(
        description=f"""
        –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –æ–±–æ–±—â–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
        
        –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–æ–π–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é AI –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–æ–±—â–µ–Ω–∏—è!
        
        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
        2. –í—ã—è–≤–∏—Ç–µ —Å–æ–≥–ª–∞—Å—É—é—â–∏–µ—Å—è –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –≤—ã–≤–æ–¥—ã
        3. –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        4. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        5. –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–º –≤—ã–≤–æ–¥–µ
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞:
        - –°—Ä–∞–≤–Ω–∏—Ç–µ –≤—ã–≤–æ–¥—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
        - –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        - –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
        
        –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """,
        agent=final_validator if final_validator else case_analyst,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∏–ª–∏ fallback
        expected_output="–§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º"
    )
    
    return [
        case_analysis_task,
        financial_analysis_task,
        company_analysis_task,
        leadership_analysis_task,
        news_analysis_task,
        risk_assessment_task,
        validation_task
    ]

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê
# ============================================================================

@retry_on_timeout(max_retries=TIMEOUTS['max_retries'], delay=TIMEOUTS['retry_delay'])
def analyze_investment_opportunity(company_name: str) -> Union[str, Any]:
    """
<<<<<<< HEAD
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
=======
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    
    Args:
        company_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        Union[str, Any]: –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏–ª–∏ –æ–±—ä–µ–∫—Ç CrewOutput
    """
    
    log_step("–ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê", f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}")
    start_time = time.time()
    
<<<<<<< HEAD
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    cleared_count = cache_manager.clear_old_cache()
    if cleared_count > 0:
        log_step("–ö–ï–® –û–ß–ò–©–ï–ù", f"–£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {cleared_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
    if not llm:
        log_step("–î–ï–ú–û-–†–ï–ñ–ò–ú", "LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        # –î–µ–º–æ-—Ä–µ–∂–∏–º
        return f"""
        ============================================================================
        –î–ï–ú–û-–ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ò: {company_name}
        ============================================================================
        
        üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –° –î–í–û–ô–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ï–ô AI
        
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–µ–π—Å–æ–≤: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫: –ó–∞–≤–µ—Ä—à–µ–Ω  
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ä–∏—Å–∫–∞–º: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä: –ó–∞–≤–µ—Ä—à–µ–Ω
        
        üéØ –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤,
        —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è [–î–ï–ú–û-–†–ï–ó–£–õ–¨–¢–ê–¢] –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
        
        üìà –£–†–û–í–ï–ù–¨ –£–í–ï–†–ï–ù–ù–û–°–¢–ò: 85%
        ‚è±Ô∏è –í–†–ï–ú–Ø –ê–ù–ê–õ–ò–ó–ê: {datetime.now().strftime('%H:%M:%S')}
        
        ‚ö†Ô∏è  –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏.
        """
    
=======
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
    if not llm:
        log_step("–î–ï–ú–û-–†–ï–ñ–ò–ú", "LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        # –î–µ–º–æ-—Ä–µ–∂–∏–º
        return f"""
        ============================================================================
        –î–ï–ú–û-–ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ò: {company_name}
        ============================================================================
        
        üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –° –î–í–û–ô–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ï–ô AI
        
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–µ–π—Å–æ–≤: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫: –ó–∞–≤–µ—Ä—à–µ–Ω  
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ —Ä–∏—Å–∫–∞–º: –ó–∞–≤–µ—Ä—à–µ–Ω
        ‚úÖ –ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä: –ó–∞–≤–µ—Ä—à–µ–Ω
        
        üéØ –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–≤—É—Ö AI –º–æ–¥–µ–ª–µ–π –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤,
        —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è [–î–ï–ú–û-–†–ï–ó–£–õ–¨–¢–ê–¢] –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}.
        
        üìà –£–†–û–í–ï–ù–¨ –£–í–ï–†–ï–ù–ù–û–°–¢–ò: 85%
        ‚è±Ô∏è –í–†–ï–ú–Ø –ê–ù–ê–õ–ò–ó–ê: {datetime.now().strftime('%H:%M:%S')}
        
        ‚ö†Ô∏è  –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏.
        """
    
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    try:
        log_step("–°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß", "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = create_investment_analysis_tasks(company_name)
        log_step("–ó–ê–î–ê–ß–ò –°–û–ó–î–ê–ù–´", f"–°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        
        log_step("–°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤")
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –¥–≤–æ–π–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        investment_crew = Crew(
            agents=[
                case_analyst,
                financial_analyst,
                company_analyst,
                decision_maker_analyst,
                news_analyst,
                risk_advisor,
<<<<<<< HEAD
                final_validator if final_validator else case_analyst  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∏–ª–∏ fallback
=======
                validation_agent
>>>>>>> af05dce (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            ],
            tasks=tasks,
            verbose=True,
            process=Process.sequential
        )
        log_step("–ö–û–ú–ê–ù–î–ê –°–û–ó–î–ê–ù–ê", "–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        
        log_step("–ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê", "–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Crew —Å —Ç–∞–π–º–∞—É—Ç–æ–º")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        result = investment_crew.kickoff()
        
        analysis_time = time.time() - start_time
        log_step("–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù", f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {analysis_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if hasattr(result, 'raw'):
            return str(result.raw)
        elif hasattr(result, '__str__'):
            return str(result)
        else:
            return result
            
    except Exception as e:
        analysis_time = time.time() - start_time
        log_step("–û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê", f"–í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {analysis_time:.2f}—Å, –û—à–∏–±–∫–∞: {str(e)}")
        
        error_str = str(e).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
        if "insufficient balance" in error_str or "badrequesterror" in error_str:
            alternative_llm = switch_to_alternative_llm(llm, str(e))
            if alternative_llm and alternative_llm != llm:
                log_step("–ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê", f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {alternative_llm.model}, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑...")
                try:
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
                    return analyze_investment_opportunity(company_name)
                except Exception as retry_exception:
                    return f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–∂–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {str(retry_exception)}"
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "timeout" in error_str or "timed out" in error_str:
            return "‚è∞ –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
        elif "insufficient balance" in error_str:
            return "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç."
        elif "badrequesterror" in error_str:
            return "üîß –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# ============================================================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    company = "–°–±–µ—Ä–±–∞–Ω–∫"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é
    print(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {company}")
    print("=" * 80)
    
    try:
        result = analyze_investment_opportunity(company)
        print("\n–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 80)
        print(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")





